openapi: 3.0.3
info:
  title: Chello - Task management
  description: |-
    This is an application made by using ReactJS, NodeJS, TypeScript
  # termsOfService: http://swagger.io/terms/
  # contact:
  #   email: chello@swagger.io
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  # description: Find out more about Swagger
  # url: http://swagger.io
servers:
  - url: http://localhost:3000
  - url: https://chello-be-a5ll.onrender.com
  - url: https://chello-api.onrender.com
tags:
  - name: user
    description: Operations about user
  - name: workspace
    description: Operations about workspace
  - name: card
    description: Operations about card
  - name: item
    description: Operations about item
  - name: todoList
    description: Operations about todo list
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ""
      operationId: getUserByName
      parameters:
        - name: userId
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid userId supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid userId supplied
        "404":
          description: User not found
  /workspace:
    post:
      tags:
        - workspace
      summary: Create workspace
      description: This can only be done by the logged in admin.
      operationId: createWorkspace
      requestBody:
        description: Created workspace object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
          application/xml:
            schema:
              $ref: "#/components/schemas/Workspace"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
            application/xml:
              schema:
                $ref: "#/components/schemas/Workspace"
    get:
      tags:
        - workspace
      summary: Show list of workspaces
      description: This can only be done by the logged in user.
      operationId: getWorkspace
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                $items: "#/components/schemas/Workspace"
            application/xml:
              schema:
                type: array
                $items: "#/components/schemas/Workspace"
  /workspace/{id}:
    get:
      tags:
        - workspace
      summary: Get workspace and render by workspace id
      description: ""
      operationId: getWorkspaceById
      parameters:
        - name: id
          in: path
          description: "The ID that needs to be fetched"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
            application/xml:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid id supplied
        "404":
          description: Workspace not found
    put:
      tags:
        - workspace
      summary: Update workspace
      description: This can only be done by the logged in workspace's admin.
      operationId: updateWorkspace
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent workspace in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
          application/xml:
            schema:
              $ref: "#/components/schemas/Workspace"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - workspace
      summary: Patch workspace with body (isPublic || isFavorite)
      description: This can only be done by the logged in workspace's admin.
      operationId: patchWorkspace
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Patch workspace with isPublic or isFavorite
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspacePatch"
          application/xml:
            schema:
              $ref: "#/components/schemas/WorkspacePatch"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WorkspacePatch"
      responses:
        "200":
          description: Thay đổi thành công
        "400":
          description: Thay đổi thất bại
    delete:
      tags:
        - workspace
      summary: Delete workspace
      description: This can only be done by the logged in workspace's admin.
      operationId: deleteWorkspace
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted successfully
        "400":
          description: Invalid id supplied
        "404":
          description: Workspace not found
  /card:
    post:
      tags:
        - card
      summary: Create card
      description: This can only be done by the logged in admin.
      operationId: createCard
      requestBody:
        description: Created card object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Card"
          application/xml:
            schema:
              $ref: "#/components/schemas/Card"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Card"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
            application/xml:
              schema:
                $ref: "#/components/schemas/Card"
  /cards:
    get:
      tags:
        - card
      summary: Show list of cards
      description: This can only be done by the logged in user.
      operationId: showListCards
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                $items: "#/components/schemas/Card"
            application/xml:
              schema:
                type: array
                $items: "#/components/schemas/Card"
  /card/{cardId}:
    get:
      tags:
        - card
      summary: Get card and render by card id
      description: ""
      operationId: getCardById
      parameters:
        - name: cardId
          in: path
          description: "The ID that needs to be fetched"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
            application/xml:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          description: Invalid cardId supplied
        "404":
          description: Card not found
    put:
      tags:
        - card
      summary: Update card
      description: This can only be done by the logged in workspace's admin.
      operationId: updateCard
      parameters:
        - name: cardId
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent card in the workspace
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Card"
          application/xml:
            schema:
              $ref: "#/components/schemas/Card"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Card"
      responses:
        default:
          description: successful operation
  /card/{cardId}/setActived:
    get:
      tags:
        - card
      summary: Set active for card
      description: This can only be done by the logged in workspace's admin.
      operationId: setActivedCard
      parameters:
        - name: cardId
          in: path
          description: id that need to set actived
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "404":
          description: card id not found
  /item:
    post:
      tags:
        - item
      summary: Create item
      description: This can only be done by the logged in admin.
      operationId: createItem
      requestBody:
        description: Created item object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
          application/xml:
            schema:
              $ref: "#/components/schemas/Item"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                $ref: "#/components/schemas/Item"
  /item/{itemId}:
    get:
      tags:
        - item
      summary: Get item and render by item id
      description: ""
      operationId: getItemById
      parameters:
        - name: itemId
          in: path
          description: "The ID that needs to be fetched"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
            application/xml:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid itemId supplied
        "404":
          description: Item not found
    put:
      tags:
        - item
      summary: Update item
      description: This can only be done by the logged in workspace's admin.
      operationId: updateItem
      parameters:
        - name: itemId
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent item in the card
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
          application/xml:
            schema:
              $ref: "#/components/schemas/Item"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        default:
          description: successful operation
  /item/{itemId}/setActived:
    get:
      tags:
        - item
      summary: Set active for item
      description: This can only be done by the logged in workspace's admin.
      operationId: setActivedItem
      parameters:
        - name: itemId
          in: path
          description: id that need to set actived
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "404":
          description: item id not found
  /todoList:
    post:
      tags:
        - todoList
      summary: Create todoList
      description: This can only be done by the logged in admin.
      operationId: createTodoList
      requestBody:
        description: Created todoList object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoList"
          application/xml:
            schema:
              $ref: "#/components/schemas/TodoList"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TodoList"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
            application/xml:
              schema:
                $ref: "#/components/schemas/TodoList"
  /todoList/{todoListId}:
    get:
      tags:
        - todoList
      summary: Get todoList and render by todoList id
      description: ""
      operationId: getTodoListById
      parameters:
        - name: todoListId
          in: path
          description: "The ID that needs to be fetched"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
            application/xml:
              schema:
                $ref: "#/components/schemas/TodoList"
        "400":
          description: Invalid todoListId supplied
        "404":
          description: TodoList not found
    put:
      tags:
        - todoList
      summary: Update todoList
      description: This can only be done by all members in workspace.
      operationId: updateTodoList
      parameters:
        - name: todoListId
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent todoList in the item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoList"
          application/xml:
            schema:
              $ref: "#/components/schemas/TodoList"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TodoList"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - todoList
      summary: Delete todoList
      description: This can only be done by the logged in workspace's admin.
      operationId: deleteTodoList
      parameters:
        - name: todoListId
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid todoListId supplied
        "404":
          description: Workspace not found
  /todoList/{todoListId}/setDone:
    get:
      tags:
        - todoList
      summary: Set done for item in todoList
      description: This can only be done by all members in workspace.
      operationId: setDoneTodoList
      parameters:
        - name: todoListId
          in: path
          description: id that need to set done
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "404":
          description: todoList id not found
components:
  schemas:
    User:
      required:
        - userId
        - mail
        - password
      type: object
      properties:
        userId:
          type: string
          example: "user10"
        username:
          type: string
          example: theUser
        mail:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        avatar:
          type: string
        # phone:
        #   type: string
        #   example: "12345"
        # userStatus:
        #   type: integer
        #   description: User Status
        #   format: int32
        #   example: 1
      xml:
        name: user
    Workspace:
      required:
        - workspaceId
        - workspaceName
      type: object
      properties:
        id:
          type: string
          example: "ws11"
        workspaceName:
          type: string
          example: "Chello Project"
        isPublic:
          type: boolean
        isFavorite:
          type: boolean
        workspaceImage:
          type: string
          example: "https://digitalsynopsis.com/wp-content/uploads/2017/07/beautiful-color-ui-gradients-backgrounds-relay.png"
        member:
          type: array
          $items: "#/components/schemas/User"
        cards:
          type: array
          $items: "#/components/schemas/Card"
      xml: workspace
    Card:
      required:
        - cardId
        - cardName
      type: object
      properties:
        cardId:
          type: string
          example: "card10"
        cardName:
          type: string
          example: "Tasks"
        isActived:
          type: boolean
        items:
          type: array
          $items: "#/components/schemas/Item"
      xml: card
    Item:
      required:
        - itemId
        - itemName
      type: object
      properties:
        itemId:
          type: string
          example: "item4"
        itemName:
          type: string
          example: "ERD design"
        description:
          type: string
          example: "Thiết kế bằng draw.io"
        label:
          type: string
          example: "Label example"
        background:
          type: "string"
          example: "red"
        deadline:
          type: string
          format: date
        member:
          type: array
          $items: "#/components/schemas/User"
        todoList:
          type: array
          $items: "#/components/schemas/TodoList"
      xml: item
    TodoList:
      required:
        - todoListId
        - description
      type: object
      properties:
        todoListId:
          type: string
          example: "todo01"
        description:
          type: string
          example: "Bước 1 là bay"
        isDone:
          type: boolean
      xml: todoList
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
    WorkspacePatch:
      type: object
      properties:
        isPublic:
          type: boolean
        isFavorite:
          type: boolean
      xml:
        name: "workspace"
  # requestBodies:
  #   Pet:
  #     description: Pet object that needs to be added to the store
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/Pet"
  #       application/xml:
  #         schema:
  #           $ref: "#/components/schemas/Pet"
  #   UserArray:
  #     description: List of user object
  #     content:
  #       application/json:
  #         schema:
  #           type: array
  #           items:
  #             $ref: "#/components/schemas/User"
  # securitySchemes:
  #   petstore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header
